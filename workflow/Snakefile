# -------------------------------------
# Snakefile: set up and module organization
# -------------------------------------
import pandas as pd


# Load sample information and validate
configfile: "config/config.yaml"
samples_df = pd.read_csv("config/samples.tsv", sep="\t")
samples = samples_df['sample']
coassemblies = list(set(samples_df['assembly']))


# load results path
results = config["results"]


# load report
report: "report/workflow.rst"


# -------------------------------------
# Modularization: rules to include
# -------------------------------------
include: "rules/01_read_preprocessing.smk"
# include: "rules/02_virus_enrichment.smk"
# include: "rules/03_read_assembly.smk"
# include: "rules/04_virus_identification.smk"
# include: "rules/05_virus_dereplication.smk"
# include: "rules/06_virus_quality.smk"
# include: "rules/07_virus_binning.smk"
# include: "rules/08_virus_host.smk"
# include: "rules/09_virus_taxonomy.smk"
# include: "rules/10_virus_lifestyle.smk"
# include: "rules/11_virus_function.smk"
# include: "rules/12_virus_clustering.smk"


# -------------------------------------
# Pipeline outputs
# -------------------------------------
def get_final_output(wildcards):
        
    final_output = []

    final_output.append(results + "01_READ_PREPROCESSING/raw_multiqc_report.html")

    final_output.append(results + "01_READ_PREPROCESSING/preprocessed_multiqc_report.html")

    # final_output.append(results + "02_VIRUS_ENRICHMENT/virus_enrichment_figure.png")

    # final_output += expand(results + "03_READ_ASSEMBLY/04_quast/{sample}/transposed_report.tsv", sample=samples)

    # final_output += expand(results + "03_READ_ASSEMBLY/04_quast/{assembly}_coassembly/transposed_report.tsv", assembly=coassemblies)


    # final_output.append(results + "03_READ_ASSEMBLY/read_assembly_figure.png")

    # final_output.append(
    #     results + "04_VIRUS_IDENTIFICATION/virus_identification_figure.png"
    # )

    # final_output.append(results + "05_VIRUS_DEREPLICATION/virus_dereplication_figure.png")

    # final_output.append(results + "06_VIRUS_QUALITY/virus_quality_figure.png")

    # final_output.append(results + "08_VIRUS_HOST/01_crispr_spacers/host_taxonomy.csv")

    # final_output.append(results + "08_VIRUS_HOST/02_phist/phist_host_taxonomy.csv")

    # final_output.append(results + "08_VIRUS_HOST/03_rafah/RaFAH_Seq_Info_Prediction.tsv")

    # final_output.append(results + "10_VIRUS_LIFESTYLE/virus_lifestyle_analysis.png")

    # final_output.append(results + "12_VIRUS_CLUSTERING/virus_clustering_figure.png")

    # final_output.append(resources + "dram/dram_setup_complete")

    return final_output


rule all:
    input:
        get_final_output,
